package project_refactoring;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Calendar;
import java.util.StringTokenizer;
import java.util.Vector;

import javax.swing.ImageIcon;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;

import lombok.Data;
import project_refactoring.ConnectedClient.MyRoom;
import project_refactoring.gui.ServerFrame;
import project_refactoring.interfaces.ProtocolImpl;

@Data
public class Server {

	// 접속된 유저 벡터
	private Vector<ConnectedClient> connectedClients = new Vector<>();
	// 만들어진 방 벡터
	private Vector<MyRoom> madeRooms = new Vector<>();

	// 프레임 창
	private ServerFrame serverFrame;

	private JTextArea mainBoard;

	// 소켓 장치
	private ServerSocket serverSocket;
	private Socket socket;

	// 파일 저장을 위한 장치
	private FileWriter fileWriter;

	private ImageIcon icon = new ImageIcon("images/erroricon.png");

	public Server() {
		serverFrame = new ServerFrame(this);
		mainBoard = serverFrame.getMainBoard();
	}

	/**
	 * 포트번호 입력하고 버튼 누르면 포트번호로 서버 시작.
	 */
	public void startServer() {
		try {
			// 서버 소켓 장치
			serverSocket = new ServerSocket(10000);
			serverViewAppendWriter("[알림] 서버 시작\n");
			serverFrame.getConnectBtn().setEnabled(false);
			connectClient();

		} catch (IOException e) {
			JOptionPane.showMessageDialog(null, "이미 사용중인 포트입니다.", "알림", JOptionPane.ERROR_MESSAGE, icon);
			serverFrame.getConnectBtn().setEnabled(true);
		}
	}

	/**
	 * 서버 대기하여 소켓 연결을 하고, 스레드 실행<br>
	 */
	public void connectClient() {
		new Thread(new Runnable() {

			@Override
			public void run() {
				while (true) {
					try {

						// 소켓 장치
						socket = serverSocket.accept();
						serverViewAppendWriter("[알림] 사용자 접속 대기\n");

						// 연결을 대기 하다가 유저가 들어오면 유저 생성, 소켓으로 유저 구분 가능.
						ConnectedClient client = new ConnectedClient(socket, this);
						client.start();
					} catch (IOException e) {
						// 서버 중지
						serverViewAppendWriter("[에러] 접속 에러 ! !\n");

					}
				}
			}
		}).start();
	}

	/**
	 * 전체 접속된 유저에게 출력하는 것
	 * 
	 * @param msg
	 */
	public void broadCast(String msg) {
		for (int i = 0; i < connectedUsers.size(); i++) {
			ConnectedUser user = connectedUsers.elementAt(i);
			user.writer(msg);
		}
	}

	/**
	 * 서버로 들어오는 요청은 모두 저장되는 파일 Writer.<br>
	 * 
	 * @param str
	 */
	public void serverViewAppendWriter(String str) {
		try {
			fileWriter = new FileWriter("kha_talk_log.txt", true);
			mainBoard.append(str);
			fileWriter.write(str);
			fileWriter.flush();
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		} catch (IOException e) {
			e.printStackTrace();
		}
	}

	public static void main(String[] args) {
		new Server();
	}
}
