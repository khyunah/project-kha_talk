package project_refactoring;

import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.net.Socket;
import java.util.StringTokenizer;
import java.util.Vector;

import javax.swing.ImageIcon;
import javax.swing.JOptionPane;

import lombok.Data;
import project_refactoring.interfaces.ProtocolImpl;

@Data
public class ConnectedClient extends Thread implements ProtocolImpl {
	// 소켓 장치
	private Socket socket;

	// 입출력 장치
	private BufferedReader reader;
	private BufferedWriter writer;

	// 유저 정보
	private String id;
	private String myRoomName;
	
	private Server mContext;
	private ImageIcon icon = new ImageIcon("images/erroricon.png");
	
	private String protocol;
	private String from;
	private String message;
	
	// 방 만들기 같은 방 이름 체크
	private boolean roomCheck;

	public ConnectedClient(Socket socket, Server mContext) {
		this.socket = socket;
		this.mContext = mContext;
		connectIO();
	}

	/**
	 * 입출력 장치 연결<br>
	 */
	private void connectIO() {
		try {
			// 입출력 장치
			reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
			writer = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));

			sendInfomation();
		} catch (IOException e) {
			JOptionPane.showMessageDialog(null, "서버 입출력 장치 에러!", "알림", JOptionPane.ERROR_MESSAGE, icon);
			mContext.serverViewAppendWriter("[에러] 서버 입출력 장치 에러 ! !\n");
		}
	}

	/**
	 * 처음 유저가 로그인 되었을때 화면 부분의 명단 업데이트와<br>
	 * 접속되어 있는 유저들에게 새로운 유저(로그인 한 새로운 유저 )를 알리기<br>
	 */
	private void sendInfomation() {
		try {
			// 유저의 아이디를 가지고 온다.
			id = reader.readLine();
			mContext.serverViewAppendWriter("[접속] " + id + "님\n");

			// 접속된 유저들에게 유저 명단 업데이트를 위한 출력
			newUser();

			// 방금 연결된 유저측에서 유저 명단 업데이트를 위한 출력
			connectedUser();

			// 방금 연결된 유저측에서 룸 명단 업데이트를 위한 출력
			madeRoom();

		} catch (IOException e) {
			JOptionPane.showMessageDialog(null, "접속 에러 !", "알림", JOptionPane.ERROR_MESSAGE, icon);
			mContext.serverViewAppendWriter("[에러] 접속 에러 ! !\n");
		}
	}

	@Override
	public void run() {
		try {
			while (true) {
				String str = reader.readLine();
				checkProtocol(str);
			}
		} catch (IOException e) {
			JOptionPane.showMessageDialog(null, "유저 접속 끊김 !", "알림", JOptionPane.ERROR_MESSAGE, icon);
			mContext.serverViewAppendWriter("[에러] 유저 " + id + " 접속 끊김 ! !\n");
			for (int i = 0; i < mContext.getMadeRooms().size(); i++) {
				MyRoom myRoom = mContext.getMadeRooms().elementAt(i);
				if (myRoom. roomName.equals(this.myRoomName)) {
					myRoom.removeRoom(this);
				}
			}
			mContext.getConnectedClients().remove(this);
			mContext.broadCast("UserOut/" + id);
		}
	}

	/**
	 * 프로토콜을 구별해서 해당 메소드 호출 <br>
	 * 
	 * @param str
	 */
	private void checkProtocol(String str) {
		StringTokenizer tokenizer = new StringTokenizer(str, "/");

		protocol = tokenizer.nextToken();
		from = tokenizer.nextToken();

		if (protocol.equals("Chatting")) {
			message = tokenizer.nextToken();
			chatting();

		} else if (protocol.equals("SecretMessage")) {
			message = tokenizer.nextToken();
			secretMessage();

		} else if (protocol.equals("MakeRoom")) {
			makeRoom();

		} else if (protocol.equals("OutRoom")) {
			outRoom();

		} else if (protocol.equals("EnterRoom")) {
			enterRoom();
		}
	}

	/**
	 * 클라이언트측으로 보내는 응답<br>
	 * 
	 * @param str
	 */
	private void writer(String str) {
		try {
			writer.write(str + "\n");
			writer.flush();
		} catch (IOException e) {
			JOptionPane.showMessageDialog(null, "서버 출력 에러 !", "알림", JOptionPane.ERROR_MESSAGE, icon);
		}
	}

	/**
	 * 프로토콜 인터페이스 <br>
	 */
	@Override
	public void chatting() {
		mContext.serverViewAppendWriter("[메세지] " + from + "_" + message + "\n");

		for (int i = 0; i < mContext.getMadeRooms().size(); i++) {
			MyRoom myRoom = mContext.getMadeRooms().elementAt(i);

			if (myRoom.roomName.equals(from)) {
				myRoom.roomBroadCast("Chatting/" + id + "/" + message);
			}
		}
	}

	@Override
	public void secretMessage() {
		mContext.serverViewAppendWriter("[비밀 메세지] " + id + "ㅡ>" + from + "_" + message + "\n");

		for (int i = 0; i < mContext.getConnectedClients().size(); i++) {
			ConnectedClient client = mContext.getConnectedClients().elementAt(i);

			if (client.id.equals(from)) {
				client.writer("SecretMessage/" + id + "/" + message);
			}
		}
	}

	@Override
	public void makeRoom() {
		for (int i = 0; i < mContext.getMadeRooms().size(); i++) {
			MyRoom room = mContext.getMadeRooms().elementAt(i);

			if (room.roomName.equals(from)) {
				writer("FailMakeRoom/" + from);
				mContext.serverViewAppendWriter("[방 생성 실패]" + id + "_" + from + "\n");
				roomCheck = false;
			} else {
				roomCheck = true;
			}
		}

		if (roomCheck) {
			myRoomName = from;
			MyRoom myRoom = new MyRoom(from, this);
			mContext.getMadeRooms().add(myRoom);
			mContext.serverViewAppendWriter("[방 생성]" + id + "_" + from + "\n");

			newRoom();
			writer("MakeRoom/" + from);
		}
	}

	@Override
	public void newRoom() {
		mContext.broadCast("NewRoom/" + from);
	}

	@Override
	public void outRoom() {
		for (int i = 0; i < mContext.getMadeRooms().size(); i++) {
			MyRoom myRoom = mContext.getMadeRooms().elementAt(i);

			if (myRoom.roomName.equals(from)) {
				myRoomName = null;
				myRoom.roomBroadCast("Chatting/퇴장/" + id + "님 퇴장");
				mContext.serverViewAppendWriter("[방 퇴장]" + id + "_" + from + "\n");
				myRoom.removeRoom(this);
				writer("OutRoom/" + from);
			}
		}
	}

	@Override
	public void enterRoom() {
		for (int i = 0; i < madeRooms.size(); i++) {
			MyRoom myRoom = madeRooms.elementAt(i);

			if (myRoom.roomName.equals(from)) {
				myRoomName = from;
				myRoom.addUser(this);
				myRoom.roomBroadCast("Chatting/입장/" + id + "님 입장");
				serverViewAppendWriter("[입장]" + from + " 방_" + id + "\n");
				writer("EnterRoom/" + from);
			}
		}
	}

	@Override
	public void newUser() {
		// 자기자신을 벡터에 추가
		connectedUsers.add(this);
		broadCast("NewUser/" + id);
	}

	@Override
	public void connectedUser() {
		for (int i = 0; i < connectedUsers.size(); i++) {
			ConnectedUser user = connectedUsers.elementAt(i);
			writer("ConnectedUser/" + user.id);
		}
	}

	@Override
	public void madeRoom() {
		for (int i = 0; i < madeRooms.size(); i++) {
			MyRoom myRoom = madeRooms.elementAt(i);
			writer("MadeRoom/" + myRoom.roomName);
		}
	}
	/**
	 * 방만들기를 했을때 생성되는 MyRoom클래스<br>
	 * 
	 * @author 김현아
	 *
	 */
	public class MyRoom {
	
		public String roomName;
		// myRoom에 들어온 사람들의 정보가 담김.
		public Vector<ConnectedClient> myRoom = new Vector<>();
	
		public MyRoom(String roomName, ConnectedClient connectedClient) {
			this.roomName = roomName;
			this.myRoom.add(connectedClient);
			connectedClient.myRoomName = roomName;
		}
	
		/**
		 * 방에 있는 사람들에게 출력
		 */
		public void roomBroadCast(String msg) {
			for (int i = 0; i < myRoom.size(); i++) {
				ConnectedUser user = myRoom.elementAt(i);
	
				user.writer(msg);
			}
		}
	
		public void addUser(ConnectedUser connectedUser) {
			myRoom.add(connectedUser);
		}
	
		public void removeRoom(ConnectedClient client) {
			myRoom.remove(client);
			boolean empty = myRoom.isEmpty();
			if (empty) {
				for (int i = 0; i < madeRooms.size(); i++) {
					MyRoom myRoom = madeRooms.elementAt(i);
	
					if (myRoom.roomName.equals(roomName)) {
						madeRooms.remove(this);
						serverViewAppendWriter("[방 삭제]" + user.id + "_" + from + "\n");
						roomBroadCast("OutRoom/" + from);
						broadCast("EmptyRoom/" + from);
						break;
					}
				}
			}
		}
	}
}

